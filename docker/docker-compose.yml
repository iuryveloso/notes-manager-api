services:
  api:
    build:
      args:
        user: ${USER_API}
        uid: 1000
      context: ./php
      dockerfile: Dockerfile
    image: corenote_api
    container_name: corenote_api
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ${API_DIRECTORY}:/var/www
    networks:
      - corenote
    depends_on:
      - mysql
  mysql:
    image: mysql:8.4
    container_name: corenote-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - corenote
  nginx:
    image: nginx:1.27
    container_name: corenote-nginx
    restart: unless-stopped
    ports:
      - ${API_PORT}:80
    volumes:
      - ${API_DIRECTORY}:/var/www
      - ./nginx:/etc/nginx/conf.d
    networks:
      - corenote
    depends_on:
      - api
  web_app:
    build:
      args:
        user: ${USER_WEB_APP}
      context: ./node
      dockerfile: Dockerfile
    image: corenote-web_app
    container_name: corenote-web-app
    volumes:
      - ${APP_DIRECTORY}:/web_app
    networks:
      - corenote
    working_dir: /web_app
    ports:
      - ${APP_PORT}:${APP_PORT}
    command: bash -c "npm install && npm run build && npm run start"
    depends_on:
      - api
networks:
  corenote:
    driver: bridge
volumes:
  mysql_data: